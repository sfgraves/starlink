# -*- Shell-Script -*-
# File: @staretcdir@/profile
# Init Version: @VERSION@
# From CVS $Revision$

# This file must be sourced before Starlink software can be used.
# This script contains environment and alias definitions and must
# be sourced rather than executed. It is suitable for use from a bash
# shell

# This can be achieved by adding the line:
#
#    source @staretcdir@/profile
#
# to your .profile file. for the ultra paranoid, add a check for file
# existence as well.

# Break the file up along the lines of the cshrc and login rather
# than combining tests into a single block.

# Make ${1+"$@"} portability feature work on zsh, too.
test "${ZSH_VERSION+set}" = set && alias -g '${1+"$@"}'='"$@"'

# To simplify relocation use local variables rather than using the
# @bindir@ everywhere
relocate=0
if test "${STARLINK_DIR}" != ""; then
    if [ -e ${STARLINK_DIR} ]; then
        if test "${STARLINK_DIR}" != "@exec_prefix@"; then
            if [ -e ${STARLINK_DIR}/bin ]; then
                relocate=1
            fi
        fi
    fi
fi

if [ ${relocate} -ne 0 ]; then
    exec_prefix=${STARLINK_DIR}
    bindir=${exec_prefix}/bin
    staretcdir=${exec_prefix}/etc
    starhelpdir=${exec_prefix}/help
    libdir=${exec_prefix}/lib
    sharelibdir=${exec_prefix}/lib
    datadir=${exec_prefix}/share
    mandir=${exec_prefix}/man
    starjavadir=${exec_prefix}/starjava
else
    export STARLINK_DIR=@exec_prefix@
    exec_prefix=@exec_prefix@
    bindir=@bindir@
    staretcdir=@staretcdir@
    starhelpdir=@starhelpdir@
    libdir=@libdir@
    sharelibdir=@sharelibdir@
    datadir=@datadir@
    mandir=@mandir@
    starjavadir=@starjavadir@
fi

# Add Starlink directories to relevant paths.
tmppath="${PATH}"
if ((`echo ${tmppath} | grep -c ":${bindir}/startcl:"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#:${bindir}/startcl:#:#g"`
fi

if ((`echo ${tmppath} | grep -c ":${bindir}/startcl$"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#:${bindir}/startcl##g"`
fi

if ((`echo ${tmppath} | grep -c "^${bindir}/startcl"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#${bindir}/startcl:##g"`
fi

if ((`echo ${tmppath} | grep -c ":${bindir}:"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#:${bindir}:#:#g"`
fi

if ((`echo ${tmppath} | grep -c ":${bindir}$"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#:${bindir}##g"`
fi

if ((`echo ${tmppath} | grep -c "^${bindir}"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#${bindir}:##g"`
fi

if ((`echo ${tmppath} | grep -c ":${starjavadir}/bin:"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#:${starjavadir}/bin:#:#g"`
fi

if ((`echo ${tmppath} | grep -c ":${starjavadir}/bin$"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#:${starjavadir}/bin##g"`
fi

if ((`echo ${tmppath} | grep -c "^${starjavadir}/bin"`)); then
    tmppath=`echo ${tmppath} | sed -e "s#${starjavadir}:##g"`
fi

export PATH="${tmppath}:${bindir}/startcl:${bindir}:${starjavadir}/bin"

#
#     Prepend Starlink JRE (and JDK) paths to PATH.
#     Do JRE after JDK so that the JRE takes precidence.

JREHOME=${exec_prefix}/java/jre/bin
JDKHOME=${exec_prefix}/java/bin

if test -d ${JDKHOME}; then
    export PATH="${JDKHOME}:${PATH}"
fi
if test -d ${JREHOME}; then
    export PATH="${JREHOME}:${PATH}"
fi
unset JREHOME JDKHOME

#     Check if @LD_LIB_PATH@ is set, needed on all platforms
#     that have shareable libraries, plus all platforms that
#     have Java JNI libraries.

#  Is @LD_LIB_PATH@ set?

if test "${@LD_LIB_PATH@}" != ""; then

#  @LD_LIB_PATH@ is set.  Search it for required components and
#  Set appropriate flag variables.

   found_sharelib="no"
   if test "`echo ${@LD_LIB_PATH@} | grep -c ":${sharelibdir}"`" != "0"; then
      found_sharelib="yes"
   fi
   if test "`echo ${@LD_LIB_PATH@} | grep -c "^${sharelibdir}"`" != "0"; then
      found_sharelib="yes"
   fi

#  Add required components to end of @LD_LIB_PATH@ if flag variables
#  indicate they are not present.

   if test "$found_sharelib" = "no"; then
      export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${sharelibdir}"

      case "@build@" in
         *-osf*)
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/alpha"
         ;;
         x86_64*-linux*)
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/amd64"
         ;;
         *-linux*)
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/i386"
         ;;
         *-cygwin*)
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/x86"
         ;;
         *-sun*)
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/sparc"
         ;;
         *pc-apple-darwin*)
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/ppc"
         ;;
         *86*-apple-darwin*)
            # We just add both architectures
            export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/i386:${starjavadir}/lib/x86_64"
         ;;
      esac
   fi

else

#  @LD_LIB_PATH@ is not set.  Add required components.

   export @LD_LIB_PATH@=${sharelibdir}

   case "@build@" in
     *-osf*)
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/alpha"
     ;;
     x86_64*-linux*)
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/amd64"
     ;;
     *-linux*)
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/i386"
     ;;
     *-cygwin*)
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/x86"
     ;;
     *-sun*)
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:/usr/openwin/lib:${starjavadir}/lib/sparc"
     ;;
     *pc-apple-darwin*)
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/ppc"
     ;;
     *86*-apple-darwin*)
        # We just add both architectures
        export @LD_LIB_PATH@="${@LD_LIB_PATH@}:${starjavadir}/lib/i386:${starjavadir}/lib/x86_64"
     ;;
   esac
fi

# Define the Starlink environment first

#  ATOOLS

if test -f ${bindir}/atools/atools.sh; then
   export ATOOLS_DIR=${bindir}/atools
   export ATOOLS_HELP=${starhelpdir}/atools/atools
fi

#  AUTOASTROM

if test -f ${exec_prefix}/Perl/bin/autoastrom; then
   export AUTOASTROM_DIR=${exec_prefix}/Perl/bin
fi

#  CCDBIG

if test -f ${bindir}/ccdbig/ccdbig.sh; then
   export CCDBIG_DIR=${bindir}/ccdbig
fi

#  CCDPACK

if test -f ${bindir}/ccdpack/ccdpack.sh; then
   export CCDPACK_DIR=${bindir}/ccdpack
   export CCDPACK_HELP=${starhelpdir}/ccdpack/ccdpack
fi

#  Convert

if test -f ${bindir}/convert/convert.sh; then
   export CONVERT_DIR=${bindir}/convert
   export CONVERT_HELP=${starhelpdir}/convert/convert
fi

#  CUPID

if test -f ${bindir}/cupid/cupid.sh; then
   export CUPID_DIR=${bindir}/cupid
   export CUPID_HELP=${starhelpdir}/cupid/cupid
fi

#
#  CURSA
if test -f ${bindir}/cursa/cursa.sh; then
   export CURSA_DIR=${bindir}/cursa
fi

#
#  DAOPHOT
if test -f ${bindir}/daophot/daophot; then
   export DAOPHOT_DIR=${bindir}/daophot
fi

#  DATACUBE

if test -f ${bindir}/datacube/datacube.sh; then
   export DATACUBE_DIR=${bindir}/datacube
   export DATACUBE_HELP=${starhelpdir}/datacube/datacube
fi

#  ECHOMOP

if test -f ${bindir}/echomop/echomop.sh; then
   export ECHOMOP_DIR=${bindir}/echomop
fi

#  ESP

if test -f ${bindir}/esp/esp.sh; then
  export ESP_DIR=${bindir}/esp
  export ESP_HELP=${starhelpdir}/esp/esp
fi

#
#  EXTRACTOR

if test -f ${bindir}/extractor/extractor.sh; then
   export EXTRACTOR_DIR=${bindir}/extractor
   export EXTRACTOR_HELP=${starhelpdir}/extractor/extractor
fi

#  FIGARO

if test -f ${bindir}/figaro/figaro.sh; then
   export FIG_DIR=${bindir}/figaro
   export FIG_HELP=${starhelpdir}/figaro/figaro
   export FIG_HTML=${exec_prefix}/docs/sun86.htx
   export FIGARO_FORMATS="ndf,dst"
   export FIGARO_PROG_S=${staretcdir}/figaro
   export FIGARO_PROG_N=${bindir}/figaro
fi

#  Fluxes - note that we can run with fluxes.csh
#           (assuming that csh exists on the system)

if test -f ${bindir}/fluxes/fluxes.csh; then
   export FLUXES_DIR=${bindir}/fluxes
fi

#  GAIA

if test -f ${bindir}/gaia/gaia.sh; then
   export GAIA_DIR=${bindir}/gaia
fi

#  HDSTOOLS

if test -f ${bindir}/hdstools/hdstools.sh; then
   export HDSTOOLS_DIR=${bindir}/hdstools
   export HDSTOOLS_HELP=${starhelpdir}/hdstools/hdstools
fi

#  HDSTRACE

if test -f ${bindir}/hdstrace; then
   export HDSTRACE_DIR=${bindir}
   export HDSTRACE_HELP=${starhelpdir}/hdstrace
fi

# ICL

if test -f ${bindir}/icl; then
   export ADAM_PACKAGES=${starhelpdir}/adam_packages.shl
   export ICL_LOGIN_SYS=${staretcdir}/icl_login_sys.icl
fi

#  JPL

if test -f ${staretcdir}/jpleph.dat; then
   export JPL_DIR=${staretcdir}
fi

#  Kappa

if test -f ${bindir}/kappa/kappa.sh; then
   export KAPPA_DIR=${bindir}/kappa
   export KAPPA_HELP=${starhelpdir}/kappa/kappa
fi

#  Kappa Retirement Home (kaprh)

if test -f ${bindir}/kaprh/kaprh.sh; then
   export KAPRH_DIR=${bindir}/kaprh
   export KAPRH_HELP=${starhelpdir}/kaprh/kaprh
fi

#  ORAC-DR

if test -f ${bindir}/oracdr/src/etc/oracdr_start.sh; then
   export ORAC_DIR=${bindir}/oracdr/src
   export ORAC_PERL5LIB=${ORAC_DIR}/lib/perl5
   export ORAC_CAL_ROOT=${bindir}/oracdr/cal
else
  if test -f ${bindir}/oracdr/etc/oracdr_start.sh; then
     export ORAC_DIR=${bindir}/oracdr
     export ORAC_PERL5LIB=${ORAC_DIR}/lib/perl5
     export ORAC_CAL_ROOT=${ORAC_DIR}/cal
  fi
fi

#  PAMELA

if test -f ${bindir}/pamela/pamela.sh; then
   export PAMELA_DIR=${bindir}/pamela
fi

#  PERIOD

if test -f ${bindir}/period/period; then
   export PERIOD_DIR=${bindir}/period
   export PERIOD_HELP=${starhelpdir}/period
fi

#  PERL

if [ ${relocate} -ne 0 ]; then
   export PERL5LIB=${exec_prefix}/Perl/lib/perl5/site_perl
   export PERL5LIB=${exec_prefix}/Perl/lib/perl5/:${PERL5LIB}
fi

#  PGPLOT

if test -z "${PGPLOT_DIR}"; then
   export PGPLOT_DIR=${bindir}/
fi

#  PHOTOM

if test -f ${bindir}/photom/photom.sh; then
   export PHOTOM_DIR=${bindir}/photom
   export PHOTOM_HELP=${starhelpdir}/photom/photomhelp
fi

#  PISA

if test -f ${bindir}/pisa/pisa.sh; then
   export PISA_DIR=${bindir}/pisa
   export PISA_HELP=${starhelpdir}/pisa/pisahelp
fi

#  Polpack

if test -f ${bindir}/polpack/polpack.sh; then
   export POLPACK_DIR=${bindir}/polpack
   export POLPACK_HELP=${starhelpdir}/polpack/polpack
fi

#
#  PONGO
#

if test -f ${bindir}/pongo/pongo.icl; then
   export PONGO_BIN=${bindir}/pongo
   export PONGO_HELP=${starhelpdir}/pongo/pongohelp
   export PONGO_EXAMPLES=${datadir}/pongo
fi

#  SMURF

if test -f ${bindir}/smurf/smurf.sh; then
   export SMURF_DIR=${bindir}/smurf
   export SMURF_HELP=${starhelpdir}/smurf/smurf
fi

#
#  SPECX
#

if test -f ${datadir}/specx/specxstart.sh; then
   export SYS_SPECX=${datadir}/specx
   export SPECX_HELP=${starhelpdir}/specx
fi

#  SPLAT

if test -f ${starjavadir}/bin/splat/splat; then
   export SPLAT_DIR=${starjavadir}/bin/splat
fi

#  SST

if test -f ${bindir}/sst/sst.sh; then
   export SST_DIR=${bindir}/sst
   export SST_HELP=${starhelpdir}/sst/sst
fi

#  STARBENCH

if test -f ${bindir}/starbench/starbench.sh; then
   export BENCH_DIR=${bindir}/starbench
fi

#  STARMAN

if test -f ${bindir}/starman/starman.sh; then
   export STARMAN_DIR=${bindir}/starman
   export STARMAN_HELP=${starhelpdir}/starman
   export STARMAN_DATA=${staretcdir}/starman
fi

#  STILTS

if test -x ${starjavadir}/bin/stilts; then
   export STILTS_DIR=${starjavadir}/bin/stilts
fi

#  SURF

if test -f ${bindir}/surf/surf.sh; then
   export SURF_DIR=${bindir}/surf
   export SURF_HELP=${starhelpdir}/surf/surf
fi

#  TSP

if test -f ${bindir}/tsp/tsp.sh; then
   export TSP_DIR=${bindir}/tsp
fi

# Aliases
# Use sh functions rather than bash aliases for improved
# portability. Use 'declare -F' in bash to list all the functions.

# ATOOLS

if test -f ${bindir}/atools/atools.sh; then
  atools () { . $ATOOLS_DIR/atools.sh; }
  atools () { . $ATOOLS_DIR/atools.sh; }
else
  atools () { ${STARLINK_DIR}/etc/notinst atools; }
  atoolssetup () { ${STARLINK_DIR}/etc/notinst atools; }
fi

# AUTOASTROM

if test -f ${exec_prefix}/Perl/bin/autoastrom; then
  autoastrom () { ${STARLINK_DIR}/Perl/bin/perl $AUTOASTROM_DIR/autoastrom  ${1+"$@"}; }
else
  autoastrom () { ${STARLINK_DIR}/etc/notinst autoastrom; }
fi

# CCDBIG

if test -f ${bindir}/ccdbig/ccdbig.sh; then
  ccdbig () { . $CCDBIG_DIR/ccdbig.sh; }
  ccdbigsetup () { . $CCDBIG_DIR/ccdbig.sh; }
else
  ccdbig () { ${STARLINK_DIR}/etc/notinst ccdbig; }
  ccdbigsetup () { ${STARLINK_DIR}/etc/notinst ccdbig; }
fi

# CCDPACK

if test -f ${bindir}/ccdpack/ccdpack.sh; then
  ccdpack () { . $CCDPACK_DIR/ccdpack.sh; }
  ccdpacksetup () { . $CCDPACK_DIR/ccdpack.sh; }
else
  ccdpack () { ${STARLINK_DIR}/etc/notinst ccdpack; }
  ccdpacksetup () { ${STARLINK_DIR}/etc/notinst ccdpack; }
fi

# CONVERT

if test -f ${bindir}/convert/convert.sh; then
  convert () { . $CONVERT_DIR/convert.sh; }
  convertsetup () { . $CONVERT_DIR/convert.sh; }
else
  convert () { ${STARLINK_DIR}/etc/notinst convert; }
  convertsetup () { ${STARLINK_DIR}/etc/notinst convert; }
fi

# CUPID

if test -f ${bindir}/cupid/cupid.sh; then
  cupid () { . $CUPID_DIR/cupid.sh; }
  cupidsetup () { . $CUPID_DIR/cupid.sh; }
else
  cupid () { ${STARLINK_DIR}/etc/notinst cupid; }
  cupidsetup () { ${STARLINK_DIR}/etc/notinst cupid; }
fi

#
#   Cursa
#

if test -f ${bindir}/cursa/cursa.sh; then
  cursa () { . $CURSA_DIR/cursa.sh; }
  cursasetup () { . $CURSA_DIR/cursa.sh; }
else
  cursa () { ${STARLINK_DIR}/etc/notinst cursa; }
  cursasetup () { ${STARLINK_DIR}/etc/notinst cursa; }
fi

#
#  DAOPHOT
#

if test -f ${bindir}/daophot/daophot.sh; then
  daostart () { . $DAOPHOT_DIR/daophot.sh; }
  daophot () { . $DAOPHOT_DIR/daophot.sh; }
  daophotsetup () { . $DAOPHOT_DIR/daophot.sh; }
else
  daostart () { ${STARLINK_DIR}/etc/notinst daophot; }
  daophot () { ${STARLINK_DIR}/etc/notinst daophot; }
  daophotsetup () { ${STARLINK_DIR}/etc/notinst daophot; }
fi

#  DATACUBE

if test -f ${bindir}/datacube/datacube.sh; then
   datacube () { . $DATACUBE_DIR/datacube.sh; }
   datacubestart () { . $DATACUBE_DIR/datacube.sh; }
   datacubesetup () { . $DATACUBE_DIR/datacube.sh; }
else
   datacube () { ${STARLINK_DIR}/etc/notinst datacube; }
   datacubestart () { ${STARLINK_DIR}/etc/notinst datacubestart; }
   datacubesetup () { ${STARLINK_DIR}/etc/notinst datacubesetup; }
fi

# DIPSO

if test -f ${bindir}/dipso/dipsosetup.sh; then
  export DIPSO_DIR=${bindir}/dipso
  dipsosetup () { . $DIPSO_DIR/dipsosetup.sh; }
  dipso () { . $DIPSO_DIR/dipsosetup.sh; }
else
  dipsosetup () { ${STARLINK_DIR}/etc/notinst dipsosetup; }
  dipso () { ${STARLINK_DIR}/etc/notinst dipso; }
fi

# ECHOMOP

if test -f ${bindir}/echomop/echomop.sh; then
 echomop () { . $ECHOMOP_DIR/echomop.sh; }
 echomopsetup () { . $ECHOMOP_DIR/echomop.sh; }
else
 echomop () { ${STARLINK_DIR}/etc/notinst echomop; }
 echomopsetup () { ${STARLINK_DIR}/etc/notinst echomop; }
fi

# ESP

if test -f ${bindir}/esp/esp.sh; then
 esp () { . $ESP_DIR/esp.sh; }
 espsetup () { . $ESP_DIR/esp.sh; }
else
 esp () { ${STARLINK_DIR}/etc/notinst esp; }
 espsetup () { ${STARLINK_DIR}/etc/notinst esp; }
fi

#
#   Extractor
#

if test -f ${bindir}/extractor/extractor.sh; then
   extractorsetup () { . $EXTRACTOR_DIR/extractor.sh; }
   extractsetup () { . $EXTRACTOR_DIR/extractor.sh; }
   extractor () { . $EXTRACTOR_DIR/extractor.sh; }
   extract () { . $EXTRACTOR_DIR/extractor.sh; }
else
   extractorsetup () { ${STARLINK_DIR}/etc/notinst extractorsetup; }
   extractsetup () { ${STARLINK_DIR}/etc/notinst extractsetup; }
   extractor () { ${STARLINK_DIR}/etc/notinst extractor; }
   extract () { ${STARLINK_DIR}/etc/notinst extract; }
fi

#  FIGARO

if test -f ${bindir}/figaro/figaro.sh; then
   figaro () { . $FIG_DIR/figaro.sh; }
   figarosetup () { . $FIG_DIR/figaro.sh; }
   specdre () { . $FIG_DIR/specdre.sh; }
   specdresetup () { . $FIG_DIR/specdre.sh; }
   twodspec () { . $FIG_DIR/twodspec.sh; }
   twodspecsetup () { . $FIG_DIR/twodspec.sh; }
else
   figaro () { ${STARLINK_DIR}/etc/notinst figaro; }
   figarosetup () { ${STARLINK_DIR}/etc/notinst figarosetup; }
   specdre () { ${STARLINK_DIR}/etc/notinst specdre; }
   specdresetup () { ${STARLINK_DIR}/etc/notinst specdresetup; }
   twodspec () { ${STARLINK_DIR}/etc/notinst twodspec; }
   twodspecsetup () { ${STARLINK_DIR}/etc/notinst twodspecsetup; }
fi

# Fluxes

if test -f ${bindir}/fluxes/fluxes; then
  fluxes () { $FLUXES_DIR/fluxes.csh ${1+"$@"}; }
  fluxnow () { $FLUXES_DIR/fluxnow.csh; }
else
  fluxes () { ${STARLINK_DIR}/etc/notinst fluxes; }
  fluxnow () { ${STARLINK_DIR}/etc/notinst fluxnow; }
fi

#
#   Gaia
#

if test -f ${bindir}/gaia/gaia.sh; then
   gaia () { $GAIA_DIR/gaia.sh ${1+"$@"}; }
   gaiadisp () { $GAIA_DIR/gaiadisp.sh ${1+"$@"}; }
else
   gaia () { ${STARLINK_DIR}/etc/notinst gaia; }
   gaiadisp () { ${STARLINK_DIR}/etc/notinst gaiadisp; }
fi

# Kappa

if test -f ${bindir}/kappa/kappa.sh; then
  kappa () { . $KAPPA_DIR/kappa.sh; }
  kappasetup () { . $KAPPA_DIR/kappa.sh; }
else
  kappa () { ${STARLINK_DIR}/etc/notinst kappa; }
  kappasetup () { ${STARLINK_DIR}/etc/notinst kappa; }
fi

# Kappa Retirement Home (KAPRH)

if test -f ${bindir}/kaprh/kaprh.sh; then
  kaprh () { . $KAPRH_DIR/kaprh.sh; }
  kaprhsetup () { . $KAPRH_DIR/kaprh.sh; }
else
  kaprh () { ${STARLINK_DIR}/etc/notinst kaprh; }
  kaprhsetup () { ${STARLINK_DIR}/etc/notinst kaprh; }
fi

# HDSTOOLS

if test -f ${bindir}/hdstools/hdstools.sh; then
  hdstools () { . $HDSTOOLS_DIR/hdstools.sh; }
  hdstoolssetup () { . $HDSTOOLS_DIR/hdstools.sh; }
else
  hdstools () { ${STARLINK_DIR}/etc/notinst hdstools; }
  hdstoolssetup () { ${STARLINK_DIR}/etc/notinst hdstools; }
fi

# ORAC-DR

if test -f ${bindir}/oracdr/src/etc/profile; then
  source ${bindir}/oracdr/src/etc/profile
else
  if test -f ${bindir}/oracdr/etc/profile; then
    source ${bindir}/oracdr/etc/profile
  else
    oracdr_acsis () { ${STARLINK_DIR}/etc/notinst oracdr_acsis; }
    oracdr_cgs4 () { ${STARLINK_DIR}/etc/notinst oracdr_cgs4; }
    oracdr_classiccam () { ${STARLINK_DIR}/etc/notinst oracdr_classiccam; }
    oracdr_gmos () { ${STARLINK_DIR}/etc/notinst oracdr_gmos; }
    oracdr_ingrid () { ${STARLINK_DIR}/etc/notinst oracdr_ingrid; }
    oracdr_ircam () { ${STARLINK_DIR}/etc/notinst oracdr_ircam; }
    oracdr_ircam_old () { ${STARLINK_DIR}/etc/notinst oracdr_ircam_old; }
    oracdr_iris2 () { ${STARLINK_DIR}/etc/notinst oracdr_iris2; }
    oracdr_isaac () { ${STARLINK_DIR}/etc/notinst oracdr_isaac; }
    oracdr_michelle () { ${STARLINK_DIR}/etc/notinst oracdr_michelle; }
    oracdr_naco () { ${STARLINK_DIR}/etc/notinst oracdr_naco; }
    oracdr_niri () { ${STARLINK_DIR}/etc/notinst oracdr_niri; }
    oracdr_scuba () { ${STARLINK_DIR}/etc/notinst oracdr_scuba; }
    oracdr_scuba2l () { ${STARLINK_DIR}/etc/notinst oracdr_scuba2l; }
    oracdr_scuba2s () { ${STARLINK_DIR}/etc/notinst oracdr_scuba2s; }
    oracdr_scuba2lq () { ${STARLINK_DIR}/etc/notinst oracdr_scuba2lq; }
    oracdr_scuba2sq () { ${STARLINK_DIR}/etc/notinst oracdr_scuba2sq; }
    oracdr_sofi () { ${STARLINK_DIR}/etc/notinst oracdr_sofi; }
    oracdr_spex () { ${STARLINK_DIR}/etc/notinst oracdr_spex; }
    oracdr_swfcam () { ${STARLINK_DIR}/etc/notinst oracdr_swfcam; }
    oracdr_swfcam1 () { ${STARLINK_DIR}/etc/notinst oracdr_swfcam1; }
    oracdr_swfcam2 () { ${STARLINK_DIR}/etc/notinst oracdr_swfcam2; }
    oracdr_swfcam3 () { ${STARLINK_DIR}/etc/notinst oracdr_swfcam3; }
    oracdr_swfcam4 () { ${STARLINK_DIR}/etc/notinst oracdr_swfcam4; }
    oracdr_ufti () { ${STARLINK_DIR}/etc/notinst oracdr_ufti; }
    oracdr_ufti_old () { ${STARLINK_DIR}/etc/notinst oracdr_ufti_old; }
    oracdr_uist () { ${STARLINK_DIR}/etc/notinst oracdr_uist; }
    xoracdr () { ${STARLINK_DIR}/etc/notinst xoracdr; }
  fi
fi

# Pamela

if test -f ${bindir}/pamela/pamela.sh; then
   pamela () { ${PAMELA_DIR}/pamela.sh; }
   pamelasetup () { ${PAMELA_DIR}/pamela.sh; }
else
   pamela () { ${STARLINK_DIR}/etc/notinst pamela; }
   pamelasetup () { ${STARLINK_DIR}/etc/notinst pamela; }
fi

# Period

if test -f ${bindir}/period/period; then
   period () { ${PERIOD_DIR}/period; }
else
   period () { ${STARLINK_DIR}/etc/notinst period; }
fi

# Polpack

if test -f ${bindir}/polpack/polpack.sh; then
  polpack () { . $POLPACK_DIR/polpack.sh; }
  polpacksetup () { . $POLPACK_DIR/polpack.sh; }
else
  polpack () { ${STARLINK_DIR}/etc/notinst polpack; }
  polpacksetup () { ${STARLINK_DIR}/etc/notinst polpack; }
fi

#
#   Photom
#

if test -f ${bindir}/photom/photom.sh; then
   photomstart () { . $PHOTOM_DIR/photom.sh; }
   photom () { . $PHOTOM_DIR/photom.sh; }
   photomsetup () { . $PHOTOM_DIR/photom.sh; }
else
   photomstart () { ${STARLINK_DIR}/etc/notinst photomstart; }
   photom () { ${STARLINK_DIR}/etc/notinst photom; }
   photomsetup () { ${STARLINK_DIR}/etc/notinst photomsetup; }
fi

#
#   PISA
#

if test -f ${bindir}/pisa/pisa.sh; then
   pisa () { . $PISA_DIR/pisa.sh; }
   pisasetup () { . $PISA_DIR/pisa.sh; }
else
   pisa () { ${STARLINK_DIR}/etc/notinst pisa; }
   pisasetup () { ${STARLINK_DIR}/etc/notinst pisasetup; }
fi

#
#   Pongo
#

if test -f ${bindir}/pongo/pongo.icl; then
   pongo () { icl $PONGO_BIN/pongo; }
else
   pongo () { ${STARLINK_DIR}/etc/notinst pongo; }
fi

# SMURF - SCUBA-2 SURF

if test -f ${bindir}/smurf/smurf.sh; then
  smurf () { . $SMURF_DIR/smurf.sh; }
  smurfsetup () { . $SMURF_DIR/smurf.sh; }
else
  smurf () { ${STARLINK_DIR}/etc/notinst smurf; }
  smurfsetup () { ${STARLINK_DIR}/etc/notinst smurf; }
fi

#
# SPECX
#

if test -f ${datadir}/specx/specxstart.sh; then
  specx () { . $SYS_SPECX/specxstart.sh; command specx; }
  specxsetup () { . $SYS_SPECX/specxstart.sh; }
  specxstart () { . $SYS_SPECX/specxstart.sh; }
else
  specx () { ${STARLINK_DIR}/etc/notinst specx; }
  specxsetup () { ${STARLINK_DIR}/etc/notinst specxsetup; }
  specxstart () { ${STARLINK_DIR}/etc/notinst specxstart; }
fi

# SPLAT

if test -f ${starjavadir}/bin/splat/splat; then
  splat () { $SPLAT_DIR/splat ${1+"$@"}; }
  splatdisp () { $SPLAT_DIR/splatdisp ${1+"$@"}; }
  splatdispmany () { $SPLAT_DIR/splatdispmany ${1+"$@"}; }
else
  splat () { ${STARLINK_DIR}/etc/notinst splat; }
  splatdisp () { ${STARLINK_DIR}/etc/notinst splat; }
  splatdispmany () { ${STARLINK_DIR}/etc/notinst splat; }
fi

# SST

if test -f ${bindir}/sst/sst.sh; then
  sst () { . $SST_DIR/sst.sh; }
  sstsetup () { . $SST_DIR/sst.sh; }
else
  sst () { ${STARLINK_DIR}/etc/notinst sst; }
  sstsetup () { ${STARLINK_DIR}/etc/notinst sst; }
fi

# STARBENCH

if test -f ${bindir}/starbench/starbench.sh; then
  starbench () { . $BENCH_DIR/starbench.sh; }
else
  starbench () { ${STARLINK_DIR}/etc/notinst starbench; }
fi

# STARMAN

if test -f ${bindir}/starman/starman.sh; then
  starman () { . $STARMAN_DIR/starman.sh; }
  starmansetup () { . $STARMAN_DIR/starman.sh; }
else
  starman () { ${STARLINK_DIR}/etc/notinst starman; }
  starmansetup () { ${STARLINK_DIR}/etc/notinst starman; }
fi

# SURF

if test -f ${bindir}/surf/surf.sh; then
  surf () { . $SURF_DIR/surf.sh; }
  surfsetup () { . $SURF_DIR/surf.sh; }
else
  surf () { ${STARLINK_DIR}/etc/notinst surf; }
  surfsetup () { ${STARLINK_DIR}/etc/notinst surf; }
fi

# TSP

if test -f ${bindir}/tsp/tsp.sh; then
  tsp () { . $TSP_DIR/tsp.sh; }
  tspsetup () { . $TSP_DIR/tsp.sh; }
else
  tsp () { ${STARLINK_DIR}/etc/notinst tsp; }
  tspsetup () { ${STARLINK_DIR}/etc/notinst tsp; }
fi

#
#  Unset local shell variables to prevent them from leaking out
unset exec_prefix
unset bindir
unset staretcdir
unset starhelpdir
unset libdir
unset sharelibdir
unset datadir
unset mandir
unset starjavadir

#
#  ADAM_ABBRV environment variable to allow abbreviated parameters.
export ADAM_ABBRV=1

# 64-bit mode for HDS
export HDS_64BIT=1

# Done

export STAR_LOGIN=''
